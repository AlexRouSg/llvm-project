; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=instcombine < %s | FileCheck %s

define half @fdiv_exp_half(half %x) {
; CHECK-LABEL: define half @fdiv_exp_half(
; CHECK-SAME: half [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[EXP_X:%.*]] = call fast half @llvm.exp.f16(half [[X]])
; CHECK-NEXT:    [[TMP0:%.*]] = fsub fast half [[EXP_X]], [[X]]
; CHECK-NEXT:    [[DIV:%.*]] = call fast half @llvm.exp.f16(half [[TMP0]])
; CHECK-NEXT:    ret half [[DIV]]
;
entry:
  %exp_x = call fast half @llvm.exp.f16(half %x)
  %exp_exp_x = call fast half @llvm.exp.f16(half %exp_x)
  %div = fdiv fast half %exp_exp_x, %exp_x
  ret half %div
}

define float @fdiv_exp_float(float %x) {
; CHECK-LABEL: define float @fdiv_exp_float(
; CHECK-SAME: float [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[EXP_X:%.*]] = call fast float @llvm.exp.f32(float [[X]])
; CHECK-NEXT:    [[TMP0:%.*]] = fsub fast float [[EXP_X]], [[X]]
; CHECK-NEXT:    [[DIV:%.*]] = call fast float @llvm.exp.f32(float [[TMP0]])
; CHECK-NEXT:    ret float [[DIV]]
;
entry:
  %exp_x = call fast float @llvm.exp.f32(float %x)
  %exp_exp_x = call fast float @llvm.exp.f32(float %exp_x)
  %div = fdiv fast float %exp_exp_x, %exp_x
  ret float %div
}

define double @fdiv_exp_double(double %x) {
; CHECK-LABEL: define double @fdiv_exp_double(
; CHECK-SAME: double [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[EXP_X:%.*]] = call fast double @llvm.exp.f64(double [[X]])
; CHECK-NEXT:    [[TMP0:%.*]] = fsub fast double [[EXP_X]], [[X]]
; CHECK-NEXT:    [[DIV:%.*]] = call fast double @llvm.exp.f64(double [[TMP0]])
; CHECK-NEXT:    ret double [[DIV]]
;
entry:
  %exp_x = call fast double @llvm.exp.f64(double %x)
  %exp_exp_x = call fast double @llvm.exp.f64(double %exp_x)
  %div = fdiv fast double %exp_exp_x, %exp_x
  ret double %div
}

define double @fdiv_exp_swapped(double %x) {
; CHECK-LABEL: define double @fdiv_exp_swapped(
; CHECK-SAME: double [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[EXP_X:%.*]] = call fast double @llvm.exp.f64(double [[X]])
; CHECK-NEXT:    [[TMP0:%.*]] = fsub fast double [[X]], [[EXP_X]]
; CHECK-NEXT:    [[DIV:%.*]] = call fast double @llvm.exp.f64(double [[TMP0]])
; CHECK-NEXT:    ret double [[DIV]]
;
entry:
  %exp_x = call fast double @llvm.exp.f64(double %x)
  %exp_exp_x = call fast double @llvm.exp.f64(double %exp_x)
  %div = fdiv fast double %exp_x, %exp_exp_x
  ret double %div
}

define double @fdiv_exp_xy(double %x, double %y) {
; CHECK-LABEL: define double @fdiv_exp_xy(
; CHECK-SAME: double [[X:%.*]], double [[Y:%.*]]) {
; CHECK-NEXT:    [[EXP_X:%.*]] = call fast double @llvm.exp.f64(double [[X]])
; CHECK-NEXT:    [[TMP1:%.*]] = fsub fast double [[EXP_X]], [[Y]]
; CHECK-NEXT:    [[DIV:%.*]] = call fast double @llvm.exp.f64(double [[TMP1]])
; CHECK-NEXT:    ret double [[DIV]]
;
  %exp_x = call fast double @llvm.exp.f64(double %x)
  %exp_y = call fast double @llvm.exp.f64(double %y)
  %exp_exp_x = call fast double @llvm.exp.f64(double %exp_x)
  %div = fdiv fast double %exp_exp_x, %exp_y
  ret double %div
}

define double @fdiv_exp_use(double %x) {
; CHECK-LABEL: define double @fdiv_exp_use(
; CHECK-SAME: double [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[EXP_X:%.*]] = call fast double @llvm.exp.f64(double [[X]])
; CHECK-NEXT:    [[EXP_EXP_X:%.*]] = call fast double @llvm.exp.f64(double [[EXP_X]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv fast double [[EXP_EXP_X]], [[EXP_X]]
; CHECK-NEXT:    call void @use(double [[EXP_EXP_X]])
; CHECK-NEXT:    ret double [[DIV]]
;
entry:
  %exp_x = call fast double @llvm.exp.f64(double %x)
  %exp_exp_x = call fast double @llvm.exp.f64(double %exp_x)
  %div = fdiv fast double %exp_exp_x, %exp_x
  call void @use(double %exp_exp_x)
  ret double %div
}

define double @fdiv_exp_nofmf(double %x) {
; CHECK-LABEL: define double @fdiv_exp_nofmf(
; CHECK-SAME: double [[X:%.*]]) {
; CHECK-NEXT:    [[EXP_X:%.*]] = call double @llvm.exp.f64(double [[X]])
; CHECK-NEXT:    [[EXP_EXP_X:%.*]] = call double @llvm.exp.f64(double [[EXP_X]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv double [[EXP_EXP_X]], [[EXP_X]]
; CHECK-NEXT:    ret double [[DIV]]
;
  %exp_x = call double @llvm.exp.f64(double %x)
  %exp_exp_x = call double @llvm.exp.f64(double %exp_x)
  %div = fdiv double %exp_exp_x, %exp_x
  ret double %div
}

declare void @use(double)
